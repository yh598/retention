import matplotlib.pyplot as plt

# View class distribution
fraud_counts = df['fraud'].value_counts()
print(fraud_counts)

# Plot it
plt.figure(figsize=(6,4))
fraud_counts.plot(kind='bar', color=['skyblue', 'salmon'])
plt.title("Fraud vs. Non-Fraud Count")
plt.xlabel("Fraud")
plt.ylabel("Number of Records")
plt.xticks(ticks=[0, 1], labels=['Non-Fraud (0)', 'Fraud (1)'], rotation=0)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler

# Load data
df = pd.read_csv('training_data.csv')

# Drop columns that shouldn't be features
X = df.drop(columns=['fraud', 'Unnamed: 0'])  # drop ID or unnamed columns if present
y = df['fraud']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

# Optional: scale features if needed
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest
clf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
clf.fit(X_train_scaled, y_train)

y_pred = clf.predict(X_test_scaled)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred, digits=4))
